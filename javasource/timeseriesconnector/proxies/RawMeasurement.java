// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package timeseriesconnector.proxies;

public class RawMeasurement
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject rawMeasurementMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "TimeSeriesConnector.RawMeasurement";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		dateTime("dateTime"),
		measurementType("measurementType"),
		value("value"),
		RawMeasurement_Asset("TimeSeriesConnector.RawMeasurement_Asset"),
		RawMeasurement_Channel("TimeSeriesConnector.RawMeasurement_Channel");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public RawMeasurement(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "TimeSeriesConnector.RawMeasurement"));
	}

	protected RawMeasurement(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject rawMeasurementMendixObject)
	{
		if (rawMeasurementMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("TimeSeriesConnector.RawMeasurement", rawMeasurementMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a TimeSeriesConnector.RawMeasurement");

		this.rawMeasurementMendixObject = rawMeasurementMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'RawMeasurement.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static timeseriesconnector.proxies.RawMeasurement initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return timeseriesconnector.proxies.RawMeasurement.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static timeseriesconnector.proxies.RawMeasurement initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new timeseriesconnector.proxies.RawMeasurement(context, mendixObject);
	}

	public static timeseriesconnector.proxies.RawMeasurement load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return timeseriesconnector.proxies.RawMeasurement.initialize(context, mendixObject);
	}

	public static java.util.List<timeseriesconnector.proxies.RawMeasurement> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<timeseriesconnector.proxies.RawMeasurement> result = new java.util.ArrayList<timeseriesconnector.proxies.RawMeasurement>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//TimeSeriesConnector.RawMeasurement" + xpathConstraint))
			result.add(timeseriesconnector.proxies.RawMeasurement.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of dateTime
	 */
	public final java.util.Date getdateTime()
	{
		return getdateTime(getContext());
	}

	/**
	 * @param context
	 * @return value of dateTime
	 */
	public final java.util.Date getdateTime(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.dateTime.toString());
	}

	/**
	 * Set value of dateTime
	 * @param datetime
	 */
	public final void setdateTime(java.util.Date datetime)
	{
		setdateTime(getContext(), datetime);
	}

	/**
	 * Set value of dateTime
	 * @param context
	 * @param datetime
	 */
	public final void setdateTime(com.mendix.systemwideinterfaces.core.IContext context, java.util.Date datetime)
	{
		getMendixObject().setValue(context, MemberNames.dateTime.toString(), datetime);
	}

	/**
	 * @return value of measurementType
	 */
	public final String getmeasurementType()
	{
		return getmeasurementType(getContext());
	}

	/**
	 * @param context
	 * @return value of measurementType
	 */
	public final String getmeasurementType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.measurementType.toString());
	}

	/**
	 * Set value of measurementType
	 * @param measurementtype
	 */
	public final void setmeasurementType(String measurementtype)
	{
		setmeasurementType(getContext(), measurementtype);
	}

	/**
	 * Set value of measurementType
	 * @param context
	 * @param measurementtype
	 */
	public final void setmeasurementType(com.mendix.systemwideinterfaces.core.IContext context, String measurementtype)
	{
		getMendixObject().setValue(context, MemberNames.measurementType.toString(), measurementtype);
	}

	/**
	 * @return value of value
	 */
	public final java.math.BigDecimal getvalue()
	{
		return getvalue(getContext());
	}

	/**
	 * @param context
	 * @return value of value
	 */
	public final java.math.BigDecimal getvalue(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.math.BigDecimal) getMendixObject().getValue(context, MemberNames.value.toString());
	}

	/**
	 * Set value of value
	 * @param value
	 */
	public final void setvalue(java.math.BigDecimal value)
	{
		setvalue(getContext(), value);
	}

	/**
	 * Set value of value
	 * @param context
	 * @param value
	 */
	public final void setvalue(com.mendix.systemwideinterfaces.core.IContext context, java.math.BigDecimal value)
	{
		getMendixObject().setValue(context, MemberNames.value.toString(), value);
	}

	/**
	 * @return value of RawMeasurement_Asset
	 */
	public final timeseriesconnector.proxies.Asset getRawMeasurement_Asset() throws com.mendix.core.CoreException
	{
		return getRawMeasurement_Asset(getContext());
	}

	/**
	 * @param context
	 * @return value of RawMeasurement_Asset
	 */
	public final timeseriesconnector.proxies.Asset getRawMeasurement_Asset(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		timeseriesconnector.proxies.Asset result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.RawMeasurement_Asset.toString());
		if (identifier != null)
			result = timeseriesconnector.proxies.Asset.load(context, identifier);
		return result;
	}

	/**
	 * Set value of RawMeasurement_Asset
	 * @param rawmeasurement_asset
	 */
	public final void setRawMeasurement_Asset(timeseriesconnector.proxies.Asset rawmeasurement_asset)
	{
		setRawMeasurement_Asset(getContext(), rawmeasurement_asset);
	}

	/**
	 * Set value of RawMeasurement_Asset
	 * @param context
	 * @param rawmeasurement_asset
	 */
	public final void setRawMeasurement_Asset(com.mendix.systemwideinterfaces.core.IContext context, timeseriesconnector.proxies.Asset rawmeasurement_asset)
	{
		if (rawmeasurement_asset == null)
			getMendixObject().setValue(context, MemberNames.RawMeasurement_Asset.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.RawMeasurement_Asset.toString(), rawmeasurement_asset.getMendixObject().getId());
	}

	/**
	 * @return value of RawMeasurement_Channel
	 */
	public final timeseriesconnector.proxies.Channel getRawMeasurement_Channel() throws com.mendix.core.CoreException
	{
		return getRawMeasurement_Channel(getContext());
	}

	/**
	 * @param context
	 * @return value of RawMeasurement_Channel
	 */
	public final timeseriesconnector.proxies.Channel getRawMeasurement_Channel(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		timeseriesconnector.proxies.Channel result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.RawMeasurement_Channel.toString());
		if (identifier != null)
			result = timeseriesconnector.proxies.Channel.load(context, identifier);
		return result;
	}

	/**
	 * Set value of RawMeasurement_Channel
	 * @param rawmeasurement_channel
	 */
	public final void setRawMeasurement_Channel(timeseriesconnector.proxies.Channel rawmeasurement_channel)
	{
		setRawMeasurement_Channel(getContext(), rawmeasurement_channel);
	}

	/**
	 * Set value of RawMeasurement_Channel
	 * @param context
	 * @param rawmeasurement_channel
	 */
	public final void setRawMeasurement_Channel(com.mendix.systemwideinterfaces.core.IContext context, timeseriesconnector.proxies.Channel rawmeasurement_channel)
	{
		if (rawmeasurement_channel == null)
			getMendixObject().setValue(context, MemberNames.RawMeasurement_Channel.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.RawMeasurement_Channel.toString(), rawmeasurement_channel.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return rawMeasurementMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final timeseriesconnector.proxies.RawMeasurement that = (timeseriesconnector.proxies.RawMeasurement) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "TimeSeriesConnector.RawMeasurement";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
